name: Build API

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      WIFI_SSID:
        description: 'WiFi SSID'
        required: true
        default: ''
      WIFI_PASSWORD:
        description: 'WiFi Password'
        required: true
        default: ''
      JWT_SECRET:
        description: 'JWT Secret'
        required: true
        default: ''
      DEFAULT_USER_USERNAME:
        description: 'Default User Username'
        required: true
        default: ''
      DEFAULT_USER_PASSWORD:
        description: 'Default User Password'
        required: true
        default: ''

env:
  working-directory: api

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{env.working-directory}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            ${{env.working-directory}}
      - name: Write ENV file
        run: |
          touch .env
          echo WIFI_SSID=${{ inputs.WIFI_SSID }} >> .env
          echo WIFI_PASSWORD=${{ inputs.WIFI_PASSWORD }} >> .env
          echo JWT_SECRET=${{ inputs.JWT_SECRET }} >> .env
          echo DEFAULT_USER_USERNAME=${{ inputs.DEFAULT_USER_USERNAME }} >> .env
          echo DEFAULT_USER_PASSWORD=${{ inputs.DEFAULT_USER_PASSWORD }} >> .env
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/${{env.working-directory}}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/${{env.working-directory}}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{env.working-directory}}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build
        run: ${{ steps.detect-package-manager.outputs.runner }} build
      - name: Upload artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: pico-w-software
          path: ${{env.working-directory}}/build
